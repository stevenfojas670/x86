     1                                 %line 1+1 a12procs.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 
    10                                 
    11                                 
    12                                 
    13                                 
    14                                 
    15                                 
    16                                 [section .data]
    17                                 
    18                                 
    19                                 
    20                                 
    21                                 LF equ 10
    22                                 NULL equ 0
    23                                 ESC equ 27
    24                                 
    25                                 TRUE equ 1
    26                                 FALSE equ 0
    27                                 
    28                                 SUCCESS equ 0
    29                                 NOSUCCESS equ 1
    30                                 
    31                                 STDIN equ 0
    32                                 STDOUT equ 1
    33                                 STDERR equ 2
    34                                 
    35                                 SYS_read equ 0
    36                                 SYS_write equ 1
    37                                 SYS_open equ 2
    38                                 SYS_close equ 3
    39                                 SYS_fork equ 57
    40                                 SYS_exit equ 60
    41                                 SYS_creat equ 85
    42                                 SYS_time equ 201
    43                                 
    44                                 
    45                                 
    46                                 
    47 00000000 0100000000000000       currentIndex dq 1
    48 00000008 0000000000000000       myLock dq 0
    49                                 
    50                                 
    51                                 
    52                                 
    53 00000010 202E2E2E5468726561-    msgThread1 db " ...Thread starting...", LF, NULL
    54 00000010 64207374617274696E-
    55 00000010 672E2E2E0A00       
    56                                 
    57                                 
    58                                 
    59                                 
    60                                 THREAD_MIN equ 1
    61                                 THREAD_MAX equ 8
    62                                 LIMIT_MIN equ 10
    63                                 LIMIT_MAX equ 4000000000
    64                                 
    65 00000028 55736167653A202E2F-    errUsage db "Usage: ./smithNums -t <senaryNumber> ",
    66 00000028 736D6974684E756D73-
    67 00000028 202D74203C73656E61-
    68 00000028 72794E756D6265723E-
    69 00000028 20                 
    70 0000004D 2D6C203C73656E6172-     db "-l <senaryNumber>", LF, NULL
    71 0000004D 794E756D6265723E0A-
    72 0000004D 00                 
    73 00000060 4572726F722C20696E-    errOptions db "Error, invalid command line options."
    74 00000060 76616C696420636F6D-
    75 00000060 6D616E64206C696E65-
    76 00000060 206F7074696F6E732E 
    77 00000084 0A00                    db LF, NULL
    78 00000086 4572726F722C20696E-    errLSpec db "Error, invalid limit specifier."
    79 00000086 76616C6964206C696D-
    80 00000086 697420737065636966-
    81 00000086 6965722E           
    82 000000A5 0A00                    db LF, NULL
    83 000000A7 4572726F722C20696E-    errLValue db "Error, invalid limit value."
    84 000000A7 76616C6964206C696D-
    85 000000A7 69742076616C75652E 
    86 000000C2 0A00                    db LF, NULL
    87 000000C4 4572726F722C206C69-    errLRange db "Error, limit out of range."
    88 000000C4 6D6974206F7574206F-
    89 000000C4 662072616E67652E   
    90 000000DE 0A00                    db LF, NULL
    91 000000E0 4572726F722C20696E-    errTSpec db "Error, invalid thread count specifier."
    92 000000E0 76616C696420746872-
    93 000000E0 65616420636F756E74-
    94 000000E0 207370656369666965-
    95 000000E0 722E               
    96 00000106 0A00                    db LF, NULL
    97 00000108 4572726F722C20696E-    errTValue db "Error, invalid thread count value."
    98 00000108 76616C696420746872-
    99 00000108 65616420636F756E74-
   100 00000108 2076616C75652E     
   101 0000012A 0A00                    db LF, NULL
   102 0000012C 4572726F722C207468-    errTRange db "Error, thread count out of range."
   103 0000012C 7265616420636F756E-
   104 0000012C 74206F7574206F6620-
   105 0000012C 72616E67652E       
   106 0000014D 0A00                    db LF, NULL
   107                                 
   108                                 
   109                                 
   110                                 
   111 0000014F 0600000000000000       qSix dq 6
   112 00000157 0A00000000000000       qTen dq 10
   113 0000015F 0000000000000000       tmpNum dq 0
   114                                 
   115                                 
   116                                 
   117                                 
   118                                 [section .text]
   119                                 
   120                                 
   121                                 
   122                                 
   123                                 
   124                                 
   125                                 
   126                                 
   127                                 
   128                                 
   129                                 
   130                                 
   131                                 
   132                                 
   133                                 
   134                                 
   135                                 
   136                                 
   137                                 
   138                                 
   139                                 
   140                                 
   141                                 
   142                                 
   143                                 
   144                                 
   145                                 
   146                                 
   147                                 
   148                                 
   149                                 [global getArgs]
   150                                 getArgs:
   151                                 
   152 00000000 53                     push rbx
<<<<<<< HEAD
   153 00000001 4154                   push r12
   154 00000003 4155                   push r13
   155 00000005 4156                   push r14
   156 00000007 4157                   push r15
   157                                 
   158 00000009 4883FF01               cmp rdi, 1
   159 0000000D 0F8416010000           je usageErr
   160                                 
   161 00000013 4883FF05               cmp rdi, 5
   162 00000017 0F82F4000000           jb clERR
   163                                 
   164 0000001D 4883FF05               cmp rdi, 5
   165 00000021 0F87EA000000           ja clERR
   166                                 
   167 00000027 49C7C401000000         mov r12, 1
   168 0000002E 49C7C500000000         mov r13, 0
   169 00000035 4E8B3CE6               mov r15, qword [rsi + r12 * 8]
   170 00000039 438A042F               mov al, byte [r15 + r13]
   171 0000003D 3C2D                   cmp al, "-"
   172 0000003F 0F8562010000           jne threadSpecErr
   173 00000045 49FFC5                 inc r13
   174 00000048 438A042F               mov al, byte [r15 + r13]
   175 0000004C 3C74                   cmp al, "t"
   176 0000004E 0F8553010000           jne threadSpecErr
   177 00000054 49FFC5                 inc r13
   178 00000057 438A042F               mov al, byte [r15 + r13]
   179 0000005B 3C00                   cmp al, NULL
   180 0000005D 0F8544010000           jne threadSpecErr
   181                                 
   182 00000063 49FFC4                 inc r12
   183 00000066 57                     push rdi
   184 00000067 56                     push rsi
   185 00000068 4157                   push r15
   186 0000006A 4C8D3A                 lea r15, qword [rdx]
   187 0000006D 4A8B3CE6               mov rdi, qword [rsi + r12 * 8]
   188 00000071 4C89FE                 mov rsi, r15
   189 00000074 E84E010000             call aSenary2int
   190 00000079 415F                   pop r15
   191 0000007B 5E                     pop rsi
   192 0000007C 5F                     pop rdi
   193                                 
   194 0000007D 4883F800               cmp rax, FALSE
   195 00000081 0F840B010000           je threadValueErr
   196 00000087 8B02                   mov eax, dword [rdx]
   197 00000089 83F801                 cmp eax, THREAD_MIN
   198 0000008C 0F82AC000000           jb threadRangeErr
   199 00000092 83F808                 cmp eax, THREAD_MAX
   200 00000095 0F87A3000000           ja threadRangeErr
   201                                 
   202 0000009B 49C7C500000000         mov r13, 0
   203 000000A2 49FFC4                 inc r12
   204 000000A5 4E8B3CE6               mov r15, qword [rsi + r12 * 8]
   205 000000A9 438A042F               mov al, byte [r15 + r13]
   206 000000AD 3C2D                   cmp al, "-"
   207 000000AF 0F85C8000000           jne limitSpecErr
   208 000000B5 49FFC5                 inc r13
   209 000000B8 438A042F               mov al, byte [r15 + r13]
   210 000000BC 3C6C                   cmp al, "l"
   211 000000BE 0F85B9000000           jne limitSpecErr
   212 000000C4 49FFC5                 inc r13
   213 000000C7 438A042F               mov al, byte [r15 + r13]
   214 000000CB 3C00                   cmp al, NULL
   215 000000CD 0F85AA000000           jne limitSpecErr
   216                                 
   217 000000D3 49FFC4                 inc r12
   218 000000D6 57                     push rdi
   219 000000D7 56                     push rsi
   220 000000D8 4157                   push r15
   221 000000DA 4C8D39                 lea r15, qword [rcx]
   222 000000DD 4A8B3CE6               mov rdi, qword [rsi + r12 * 8]
   223 000000E1 4C89FE                 mov rsi, r15
   224 000000E4 E8DE000000             call aSenary2int
   225 000000E9 415F                   pop r15
   226 000000EB 5E                     pop rsi
   227 000000EC 5F                     pop rdi
   228 000000ED 4883F800               cmp rax, FALSE
   229 000000F1 7479                   je limitValueErr
   230                                 
   231 000000F3 488B01                 mov rax, qword [rcx]
   232 000000F6 4883F80A               cmp rax, LIMIT_MIN
   233 000000FA 725B                   jb limitRangeErr
   234                                 
   235 000000FC 48BB00286BEE000000-    mov rbx, LIMIT_MAX
   236 000000FC 00                 
   237 00000106 4839D8                 cmp rax, rbx
   238 00000109 774C                   ja limitRangeErr
   239                                 
   240 0000010B 48C7C001000000         mov rax, TRUE
   241 00000112 E9A6000000             jmp done
   242                                 
   243                                 clERR:
   244 00000117 48C7C7[00000000]       mov rdi, errOptions
   245 0000011E E8C4020000             call printString
   246 00000123 48C7C000000000         mov rax, FALSE
   247 0000012A E98E000000             jmp done
   248                                 
   249                                 usageErr:
   250 0000012F 48C7C7[00000000]       mov rdi, errUsage
   251 00000136 E8AC020000             call printString
   252 0000013B 48C7C000000000         mov rax, FALSE
   253 00000142 EB7C                   jmp done
   254                                 
   255                                 threadRangeErr:
   256 00000144 48C7C7[00000000]       mov rdi, errTRange
   257 0000014B E897020000             call printString
   258 00000150 48C7C000000000         mov rax, FALSE
   259 00000157 EB67                   jmp done
   260                                 
   261                                 limitRangeErr:
   262 00000159 48C7C7[00000000]       mov rdi, errLRange
   263 00000160 E882020000             call printString
   264 00000165 48C7C000000000         mov rax, FALSE
   265 0000016C EB52                   jmp done
   266                                 
   267                                 limitValueErr:
   268 0000016E 48C7C7[00000000]       mov rdi, errLValue
   269 00000175 E86D020000             call printString
   270 0000017A 48C7C000000000         mov rax, FALSE
   271 00000181 EB3D                   jmp done
   272                                 
   273                                 limitSpecErr:
   274 00000183 48C7C7[00000000]       mov rdi, errLSpec
   275 0000018A E858020000             call printString
   276 0000018F 48C7C000000000         mov rax, FALSE
   277 00000196 EB28                   jmp done
   278                                 
   279                                 threadValueErr:
   280 00000198 48C7C7[00000000]       mov rdi, errTValue
   281 0000019F E843020000             call printString
   282 000001A4 48C7C000000000         mov rax, FALSE
   283 000001AB EB13                   jmp done
   284                                 
   285                                 threadSpecErr:
   286 000001AD 48C7C7[00000000]       mov rdi, errTSpec
   287 000001B4 E82E020000             call printString
   288 000001B9 48C7C000000000         mov rax, FALSE
   289 000001C0 EBFE                   jmp done
   290                                 
   291                                 done:
   292 000001C2 415F                   pop r15
   293 000001C4 415E                   pop r14
   294 000001C6 415D                   pop r13
   295 000001C8 415C                   pop r12
   296 000001CA 5B                     pop rbx
   297                                 
   298 000001CB C3                     ret
   299                                 
=======
   153 00000001 4150                   push r8
   154 00000003 4151                   push r9
   155 00000005 4154                   push r12
   156 00000007 4155                   push r13
   157 00000009 4156                   push r14
   158 0000000B 4157                   push r15
   159                                 
   160 0000000D 4989D0                 mov r8, rdx
   161 00000010 4989C9                 mov r9, rcx
   162                                 
   163 00000013 4883FF01               cmp rdi, 1
   164 00000017 0F8409010000           je usageErr
   165                                 
   166 0000001D 4883FF05               cmp rdi, 5
   167 00000021 0F82E7000000           jb clERR
   168                                 
   169 00000027 4883FF05               cmp rdi, 5
   170 0000002B 0F87DD000000           ja clERR
   171                                 
   172 00000031 49C7C401000000         mov r12, 1
   173 00000038 49C7C500000000         mov r13, 0
   174 0000003F 4E8B3CE6               mov r15, qword [rsi + r12 * 8]
   175 00000043 438A042F               mov al, byte [r15 + r13]
   176 00000047 3C2D                   cmp al, "-"
   177 00000049 0F8555010000           jne threadSpecErr
   178 0000004F 49FFC5                 inc r13
   179 00000052 438A042F               mov al, byte [r15 + r13]
   180 00000056 3C74                   cmp al, "t"
   181 00000058 0F8546010000           jne threadSpecErr
   182 0000005E 49FFC5                 inc r13
   183 00000061 438A042F               mov al, byte [r15 + r13]
   184 00000065 3C00                   cmp al, NULL
   185 00000067 0F8537010000           jne threadSpecErr
   186                                 
   187 0000006D 49FFC4                 inc r12
   188 00000070 57                     push rdi
   189 00000071 56                     push rsi
   190 00000072 4A8B3CE6               mov rdi, qword [rsi + r12 * 8]
   191 00000076 4C89C6                 mov rsi, r8
   192 00000079 E84A010000             call aSenary2int
   193 0000007E 5E                     pop rsi
   194 0000007F 5F                     pop rdi
   195                                 
   196 00000080 4883F800               cmp rax, FALSE
   197 00000084 0F8405010000           je threadValueErr
   198 0000008A 418B00                 mov eax, dword [r8]
   199 0000008D 83F801                 cmp eax, THREAD_MIN
   200 00000090 0F82A5000000           jb threadRangeErr
   201 00000096 83F808                 cmp eax, THREAD_MAX
   202 00000099 0F879C000000           ja threadRangeErr
   203                                 
   204 0000009F 49C7C500000000         mov r13, 0
   205 000000A6 49FFC4                 inc r12
   206 000000A9 4E8B3CE6               mov r15, qword [rsi + r12 * 8]
   207 000000AD 438A042F               mov al, byte [r15 + r13]
   208 000000B1 3C2D                   cmp al, "-"
   209 000000B3 0F85C1000000           jne limitSpecErr
   210 000000B9 49FFC5                 inc r13
   211 000000BC 438A042F               mov al, byte [r15 + r13]
   212 000000C0 3C6C                   cmp al, "l"
   213 000000C2 0F85B2000000           jne limitSpecErr
   214 000000C8 49FFC5                 inc r13
   215 000000CB 438A042F               mov al, byte [r15 + r13]
   216 000000CF 3C00                   cmp al, NULL
   217 000000D1 0F85A3000000           jne limitSpecErr
   218                                 
   219 000000D7 49FFC4                 inc r12
   220 000000DA 57                     push rdi
   221 000000DB 56                     push rsi
   222 000000DC 4A8B3CE6               mov rdi, qword [rsi + r12 * 8]
   223 000000E0 4C89CE                 mov rsi, r9
   224 000000E3 E8E0000000             call aSenary2int
   225 000000E8 5E                     pop rsi
   226 000000E9 5F                     pop rdi
   227 000000EA 4883F800               cmp rax, FALSE
   228 000000EE 7479                   je limitValueErr
   229                                 
   230 000000F0 498B01                 mov rax, qword [r9]
   231 000000F3 4883F80A               cmp rax, LIMIT_MIN
   232 000000F7 725B                   jb limitRangeErr
   233                                 
   234 000000F9 48BB00286BEE000000-    mov rbx, LIMIT_MAX
   235 000000F9 00                 
   236 00000103 4839D8                 cmp rax, rbx
   237 00000106 774C                   ja limitRangeErr
   238                                 
   239 00000108 48C7C001000000         mov rax, TRUE
   240 0000010F E9A6000000             jmp done
   241                                 
   242                                 clERR:
   243 00000114 48C7C7[00000000]       mov rdi, errOptions
   244 0000011B E8C8020000             call printString
   245 00000120 48C7C000000000         mov rax, FALSE
   246 00000127 E98E000000             jmp done
   247                                 
   248                                 usageErr:
   249 0000012C 48C7C7[00000000]       mov rdi, errUsage
   250 00000133 E8B0020000             call printString
   251 00000138 48C7C000000000         mov rax, FALSE
   252 0000013F EB7C                   jmp done
   253                                 
   254                                 threadRangeErr:
   255 00000141 48C7C7[00000000]       mov rdi, errTRange
   256 00000148 E89B020000             call printString
   257 0000014D 48C7C000000000         mov rax, FALSE
   258 00000154 EB67                   jmp done
   259                                 
   260                                 limitRangeErr:
   261 00000156 48C7C7[00000000]       mov rdi, errLRange
   262 0000015D E886020000             call printString
   263 00000162 48C7C000000000         mov rax, FALSE
   264 00000169 EB52                   jmp done
   265                                 
   266                                 limitValueErr:
   267 0000016B 48C7C7[00000000]       mov rdi, errLValue
   268 00000172 E871020000             call printString
   269 00000177 48C7C000000000         mov rax, FALSE
   270 0000017E EB3D                   jmp done
   271                                 
   272                                 limitSpecErr:
   273 00000180 48C7C7[00000000]       mov rdi, errLSpec
   274 00000187 E85C020000             call printString
   275 0000018C 48C7C000000000         mov rax, FALSE
   276 00000193 EB28                   jmp done
   277                                 
   278                                 threadValueErr:
   279 00000195 48C7C7[00000000]       mov rdi, errTValue
   280 0000019C E847020000             call printString
   281 000001A1 48C7C000000000         mov rax, FALSE
   282 000001A8 EB13                   jmp done
   283                                 
   284                                 threadSpecErr:
   285 000001AA 48C7C7[00000000]       mov rdi, errTSpec
   286 000001B1 E832020000             call printString
   287 000001B6 48C7C000000000         mov rax, FALSE
   288 000001BD EBFE                   jmp done
   289                                 
   290                                 done:
   291 000001BF 415F                   pop r15
   292 000001C1 415E                   pop r14
   293 000001C3 415D                   pop r13
   294 000001C5 415C                   pop r12
   295 000001C7 4159                   pop r9
   296 000001C9 4158                   pop r8
   297 000001CB 5B                     pop rbx
   298                                 
   299 000001CC C3                     ret
>>>>>>> development
   300                                 
   301                                 
   302                                 
   303                                 
   304                                 
   305                                 
   306                                 
   307                                 
   308                                 
   309                                 
<<<<<<< HEAD
   310                                 [global aSenary2int]
   311                                 aSenary2int:
   312                                 
   313 000001CC 53                     push rbx
   314 000001CD 4153                   push r11
   315 000001CF 4154                   push r12
   316 000001D1 4155                   push r13
   317 000001D3 4156                   push r14
   318                                 
   319 000001D5 49C7C300000000         mov r11, 0
   320                                 countPos:
   321 000001DC 428A041F               mov al, byte [rdi + r11]
   322 000001E0 49FFC3                 inc r11
   323 000001E3 3C00                   cmp al, NULL
   324 000001E5 75F3                   jne countPos
   325 000001E7 49FFCB                 dec r11
   326                                 
   327 000001EA 49C7C400000000         mov r12, 0
   328 000001F1 4D89DD                 mov r13, r11
   329 000001F4 49FFCD                 dec r13
   330 000001F7 48C7C306000000         mov rbx, 6
   331 000001FE 49C7C600000000         mov r14, 0
   332                                 
   333                                 toDigit:
   334 00000205 4A0FB60427             movzx rax, byte [rdi + r12]
   335                                 
   336 0000020A 3C30                   cmp al, "0"
   337 0000020C 7252                   jb valueErr
   338                                 
   339 0000020E 3C39                   cmp al, "9"
   340 00000210 774E                   ja valueErr
   341                                 
   342 00000212 2C30                   sub al, 48
   343                                 
   344 00000214 4983FD00               cmp r13, 0
   345 00000218 7500                   jne exp
   346 0000021A EB09                   jmp continue
   347                                 
   348                                 exp:
   349 0000021C F7E3                   mul ebx
   350 0000021E 49FFCD                 dec r13
   351 00000221 4983FD00               cmp r13, 0
   352 00000225 75F3                   jne exp
   353                                 
   354                                 continue:
   355 00000227 4901C6                 add r14, rax
   356                                 
   357 0000022A 49FFC4                 inc r12
   358 0000022D 49FFCB                 dec r11
   359 00000230 4D89DD                 mov r13, r11
   360 00000233 49FFCD                 dec r13
   361 00000236 4983FB00               cmp r11, 0
   362 0000023A 75C7                   jne toDigit
   363                                 
   364 0000023C 4983FE00               cmp r14, 0
   365 00000240 761E                   jbe valueErr
   366                                 
   367 00000242 4983FE0A               cmp r14, 10
   368 00000246 7200                   jb returnDword
   369 00000248 EB0A                   jmp returnQword
   370                                 
   371                                 returnDword:
   372 0000024A 448936                 mov dword [rsi], r14d
   373 0000024D 48C7C001000000         mov rax, TRUE
   374 00000254 EB13                   jmp done2
   375                                 
   376                                 returnQword:
   377 00000256 4C8936                 mov qword [rsi], r14
   378 00000259 48C7C001000000         mov rax, TRUE
   379 00000260 EB07                   jmp done2
   380                                 
   381                                 valueErr:
   382 00000262 48C7C000000000         mov rax, FALSE
   383 00000269 EBFE                   jmp done2
   384                                 
   385                                 done2:
   386 0000026B 415E                   pop r14
   387 0000026D 415D                   pop r13
   388 0000026F 415C                   pop r12
   389 00000271 415B                   pop r11
   390 00000273 5B                     pop rbx
   391                                 
   392 00000274 C3                     ret
   393                                 
=======
   310                                 
   311                                 [global aSenary2int]
   312                                 aSenary2int:
   313                                 
   314 000001CD 53                     push rbx
   315 000001CE 4153                   push r11
   316 000001D0 4154                   push r12
   317 000001D2 4155                   push r13
   318 000001D4 4156                   push r14
   319                                 
   320 000001D6 49C7C300000000         mov r11, 0
   321                                 countPos:
   322 000001DD 428A041F               mov al, byte [rdi + r11]
   323 000001E1 49FFC3                 inc r11
   324 000001E4 3C00                   cmp al, NULL
   325 000001E6 75F3                   jne countPos
   326 000001E8 49FFCB                 dec r11
   327                                 
   328 000001EB 49C7C400000000         mov r12, 0
   329 000001F2 4D89DD                 mov r13, r11
   330 000001F5 49FFCD                 dec r13
   331 000001F8 48C7C306000000         mov rbx, 6
   332 000001FF 49C7C600000000         mov r14, 0
   333                                 
   334                                 toDigit:
   335 00000206 4A0FB60427             movzx rax, byte [rdi + r12]
   336                                 
   337 0000020B 3C30                   cmp al, "0"
   338 0000020D 7252                   jb valueErr
   339                                 
   340 0000020F 3C39                   cmp al, "9"
   341 00000211 774E                   ja valueErr
   342                                 
   343 00000213 2C30                   sub al, 48
   344                                 
   345 00000215 4983FD00               cmp r13, 0
   346 00000219 7500                   jne exp
   347 0000021B EB09                   jmp continue
   348                                 
   349                                 exp:
   350 0000021D F7E3                   mul ebx
   351 0000021F 49FFCD                 dec r13
   352 00000222 4983FD00               cmp r13, 0
   353 00000226 75F3                   jne exp
   354                                 
   355                                 continue:
   356 00000228 4901C6                 add r14, rax
   357                                 
   358 0000022B 49FFC4                 inc r12
   359 0000022E 49FFCB                 dec r11
   360 00000231 4D89DD                 mov r13, r11
   361 00000234 49FFCD                 dec r13
   362 00000237 4983FB00               cmp r11, 0
   363 0000023B 75C7                   jne toDigit
   364                                 
   365 0000023D 4983FE00               cmp r14, 0
   366 00000241 761E                   jbe valueErr
   367                                 
   368 00000243 4983FE0A               cmp r14, 10
   369 00000247 7200                   jb returnDword
   370 00000249 EB0A                   jmp returnQword
   371                                 
   372                                 returnDword:
   373 0000024B 448936                 mov dword [rsi], r14d
   374 0000024E 48C7C001000000         mov rax, TRUE
   375 00000255 EB13                   jmp done2
   376                                 
   377                                 returnQword:
   378 00000257 4C8936                 mov qword [rsi], r14
   379 0000025A 48C7C001000000         mov rax, TRUE
   380 00000261 EB07                   jmp done2
   381                                 
   382                                 valueErr:
   383 00000263 48C7C000000000         mov rax, FALSE
   384 0000026A EBFE                   jmp done2
   385                                 
   386                                 done2:
   387 0000026C 415E                   pop r14
   388 0000026E 415D                   pop r13
   389 00000270 415C                   pop r12
   390 00000272 415B                   pop r11
   391 00000274 5B                     pop rbx
   392                                 
   393 00000275 C3                     ret
>>>>>>> development
   394                                 
   395                                 
   396                                 
   397                                 
   398                                 
   399                                 
   400                                 
   401                                 
   402                                 
   403                                 
   404                                 
   405                                 
   406                                 
   407                                 
<<<<<<< HEAD
   408                                 [common userLimit 1:8]
   409                                 [common smithNumberCount 1:8]
   410                                 
   411                                 [global findSmithNumberCount]
   412                                 findSmithNumberCount:
   413                                 
=======
   408                                 
   409                                 [common userLimit 1:8]
   410                                 [common smithNumberCount 1:8]
   411                                 
   412                                 [global findSmithNumberCount]
   413                                 findSmithNumberCount:
>>>>>>> development
   414                                 
   415                                 
   416                                 
   417                                 
   418                                 
   419                                 
   420                                 
   421                                 
<<<<<<< HEAD
   422 00000275 53                     push rbx
   423 00000276 4154                   push r12
   424 00000278 4155                   push r13
   425                                 
   426 0000027A 4C8B2C25[00000000]     mov r13, qword [userLimit]
   427                                 
   428 00000282 48C7C7[00000000]       mov rdi, msgThread1
   429 00000289 E859010000             call printString
   430                                 
   431                                 SNLOOP:
   432 0000028E E82E010000             call spinLock
   433 00000293 488B1C25[00000000]     mov rbx, qword [currentIndex]
   434 0000029B 48FF0425[00000000]     inc qword [currentIndex]
   435 000002A3 E82F010000             call spinUnlock
   436                                 
   437 000002A8 4C392C25[00000000]     cmp qword [currentIndex], r13
   438 000002B0 7600                   jbe SNLOOPBODY
   439 000002B2 EB2F                   jmp SNLOOPEND
   440                                 
   441                                 SNLOOPBODY:
   442 000002B4 4889DF                 mov rdi, rbx
   443 000002B7 E82A000000             call isPrime
   444 000002BC 4883F801               cmp rax, TRUE
   445 000002C0 741F                   je notSN
   446                                 
   447 000002C2 4889DF                 mov rdi, rbx
   448 000002C5 E88F000000             call findSumPrimeFactors
   449 000002CA 4989C4                 mov r12, rax
   450                                 
   451 000002CD 4889DF                 mov rdi, rbx
   452 000002D0 E857000000             call findSumOfDigits
   453 000002D5 4C39E0                 cmp rax, r12
   454 000002D8 7507                   jne notSN
   455                                 
   456 000002DA F048FF0425[00000000]     lock inc qword [smithNumberCount]
   457                                 
   458                                 notSN:
   459 000002E3 EBA7                   jmp SNLOOP
   460                                 
   461                                 SNLOOPEND:
   462 000002E5 415D                   pop r13
   463 000002E7 415C                   pop r12
   464 000002E9 5B                     pop rbx
   465                                 
   466 000002EA C3                     ret
   467                                 
=======
   422                                 
   423 00000276 53                     push rbx
   424 00000277 4154                   push r12
   425 00000279 4155                   push r13
   426                                 
   427 0000027B 4C8B2C25[00000000]     mov r13, qword [userLimit]
   428                                 
   429 00000283 48C7C7[00000000]       mov rdi, msgThread1
   430 0000028A E859010000             call printString
   431                                 
   432                                 SNLOOP:
   433 0000028F E82E010000             call spinLock
   434 00000294 488B1C25[00000000]     mov rbx, qword [currentIndex]
   435 0000029C 48FF0425[00000000]     inc qword [currentIndex]
   436 000002A4 E82F010000             call spinUnlock
   437                                 
   438 000002A9 4C392C25[00000000]     cmp qword [currentIndex], r13
   439 000002B1 7600                   jbe SNLOOPBODY
   440 000002B3 EB2F                   jmp SNLOOPEND
   441                                 
   442                                 SNLOOPBODY:
   443 000002B5 4889DF                 mov rdi, rbx
   444 000002B8 E82A000000             call isPrime
   445 000002BD 4883F801               cmp rax, TRUE
   446 000002C1 741F                   je notSN
   447                                 
   448 000002C3 4889DF                 mov rdi, rbx
   449 000002C6 E88F000000             call findSumPrimeFactors
   450 000002CB 4989C4                 mov r12, rax
   451                                 
   452 000002CE 4889DF                 mov rdi, rbx
   453 000002D1 E857000000             call findSumOfDigits
   454 000002D6 4C39E0                 cmp rax, r12
   455 000002D9 7507                   jne notSN
   456                                 
   457 000002DB F048FF0425[00000000]     lock inc qword [smithNumberCount]
   458                                 
   459                                 notSN:
   460 000002E4 EBA7                   jmp SNLOOP
   461                                 
   462                                 SNLOOPEND:
   463 000002E6 415D                   pop r13
   464 000002E8 415C                   pop r12
   465 000002EA 5B                     pop rbx
   466                                 
   467 000002EB C3                     ret
>>>>>>> development
   468                                 
   469                                 
   470                                 
   471                                 
   472                                 
   473                                 
   474                                 
   475                                 
   476                                 
   477                                 
   478                                 
   479                                 
   480                                 
   481                                 
   482                                 
   483                                 
   484                                 
   485                                 
   486                                 
<<<<<<< HEAD
   487                                 [global isPrime]
   488                                 isPrime:
   489                                 
   490 000002EB 53                     push rbx
   491 000002EC 4154                   push r12
   492 000002EE 4155                   push r13
   493                                 
   494 000002F0 4883FF01               cmp rdi, 1
   495 000002F4 762C                   jbe returnFalse
   496                                 
   497                                 
   498 000002F6 49C7C402000000         mov r12, 2
   499 000002FD 4989FD                 mov r13, rdi
   500 00000300 49D1ED                 shr r13, 1
   501                                 
   502                                 isPrimeLoop:
   503 00000303 4D39EC                 cmp r12, r13
   504 00000306 7711                   ja returnTrue
   505 00000308 4889F8                 mov rax, rdi
   506 0000030B 4899                   cqo
   507 0000030D 41F7F4                 div r12d
   508 00000310 49FFC4                 inc r12
   509 00000313 4883FA00               cmp rdx, 0
   510 00000317 7409                   je returnFalse
   511 00000319 EBE6                   jmp isPrimeLoop
   512                                 
   513                                 returnTrue:
   514 0000031B 48C7C001000000         mov rax, TRUE
   515 00000322 EB05                   jmp isPrimeComplete
   516                                 
   517                                 returnFalse:
   518 00000324 48C7C000000000         mov rax, FALSE
   519                                 
   520                                 isPrimeComplete:
   521 0000032B 415D                   pop r13
   522 0000032D 415C                   pop r12
   523 0000032F 5B                     pop rbx
   524                                 
   525 00000330 C3                     ret
   526                                 
=======
   487                                 
   488                                 [global isPrime]
   489                                 isPrime:
   490                                 
   491 000002EC 53                     push rbx
   492 000002ED 4154                   push r12
   493 000002EF 4155                   push r13
   494                                 
   495 000002F1 4883FF01               cmp rdi, 1
   496 000002F5 762C                   jbe returnFalse
   497                                 
   498                                 
   499 000002F7 49C7C402000000         mov r12, 2
   500 000002FE 4989FD                 mov r13, rdi
   501 00000301 49D1ED                 shr r13, 1
   502                                 
   503                                 isPrimeLoop:
   504 00000304 4D39EC                 cmp r12, r13
   505 00000307 7711                   ja returnTrue
   506 00000309 4889F8                 mov rax, rdi
   507 0000030C 4899                   cqo
   508 0000030E 41F7F4                 div r12d
   509 00000311 49FFC4                 inc r12
   510 00000314 4883FA00               cmp rdx, 0
   511 00000318 7409                   je returnFalse
   512 0000031A EBE6                   jmp isPrimeLoop
   513                                 
   514                                 returnTrue:
   515 0000031C 48C7C001000000         mov rax, TRUE
   516 00000323 EB05                   jmp isPrimeComplete
   517                                 
   518                                 returnFalse:
   519 00000325 48C7C000000000         mov rax, FALSE
   520                                 
   521                                 isPrimeComplete:
   522 0000032C 415D                   pop r13
   523 0000032E 415C                   pop r12
   524 00000330 5B                     pop rbx
   525                                 
   526 00000331 C3                     ret
>>>>>>> development
   527                                 
   528                                 
   529                                 
   530                                 
   531                                 
   532                                 
   533                                 
   534                                 
   535                                 
   536                                 
   537                                 
   538                                 
   539                                 
   540                                 
   541                                 
   542                                 
   543                                 
<<<<<<< HEAD
   544                                 [global findSumOfDigits]
   545                                 findSumOfDigits:
   546                                 
   547 00000331 53                     push rbx
   548 00000332 4154                   push r12
   549                                 
   550 00000334 49C7C400000000         mov r12, 0
   551                                 
   552                                 sumWhileLoop:
   553 0000033B 4883FF00               cmp rdi, 0
   554 0000033F 7700                   ja calculateSum
   555 00000341 EB12                   jmp sumCalculated
   556                                 calculateSum:
   557 00000343 4889F8                 mov rax, rdi
   558 00000346 4899                   cqo
   559 00000348 F73425[00000000]       div dword [qTen]
   560 0000034F 4901D4                 add r12, rdx
   561 00000352 4889C7                 mov rdi, rax
   562 00000355 EBE2                   jmp sumWhileLoop
   563                                 sumCalculated:
   564 00000357 4C89E0                 mov rax, r12
   565                                 
   566 0000035A 415C                   pop r12
   567 0000035C 5B                     pop rbx
   568                                 
   569 0000035D C3                     ret
   570                                 
=======
   544                                 
   545                                 [global findSumOfDigits]
   546                                 findSumOfDigits:
   547                                 
   548 00000332 53                     push rbx
   549 00000333 4154                   push r12
   550                                 
   551 00000335 49C7C400000000         mov r12, 0
   552                                 
   553                                 sumWhileLoop:
   554 0000033C 4883FF00               cmp rdi, 0
   555 00000340 7700                   ja calculateSum
   556 00000342 EB12                   jmp sumCalculated
   557                                 calculateSum:
   558 00000344 4889F8                 mov rax, rdi
   559 00000347 4899                   cqo
   560 00000349 F73425[00000000]       div dword [qTen]
   561 00000350 4901D4                 add r12, rdx
   562 00000353 4889C7                 mov rdi, rax
   563 00000356 EBE2                   jmp sumWhileLoop
   564                                 sumCalculated:
   565 00000358 4C89E0                 mov rax, r12
   566                                 
   567 0000035B 415C                   pop r12
   568 0000035D 5B                     pop rbx
   569                                 
   570 0000035E C3                     ret
>>>>>>> development
   571                                 
   572                                 
   573                                 
   574                                 
   575                                 
   576                                 
   577                                 
   578                                 
   579                                 
   580                                 
   581                                 
   582                                 
   583                                 
   584                                 
   585                                 
   586                                 
   587                                 
   588                                 
   589                                 
   590                                 
   591                                 
   592                                 
   593                                 
   594                                 
<<<<<<< HEAD
   595                                 [global findSumPrimeFactors]
   596                                 findSumPrimeFactors:
   597 0000035E 53                      push rbx
   598 0000035F 4154                    push r12
   599 00000361 4155                    push r13
   600                                 
   601 00000363 4889FB                  mov rbx, rdi
   602 00000366 49C7C402000000          mov r12, 2
   603 0000036D 49C7C500000000          mov r13, 0
   604                                 
   605                                 
   606                                 primeFactorsLoop:
   607 00000374 4883FB01                cmp rbx, 1
   608 00000378 7E41                    jle primeFactorsDone
   609                                 
   610                                 
   611 0000037A 4889D8                  mov rax, rbx
   612 0000037D 48C7C200000000          mov rdx, 0
   613 00000384 49F7F4                  div r12
   614 00000387 4883FA00                cmp rdx, 0
   615 0000038B 751B                    jne notDivisible
   616                                 
   617                                 primeDigitsLoop:
   618 0000038D 4C89E7                  mov rdi, r12
   619 00000390 E897FFFFFF              call findSumOfDigits
   620 00000395 4901C5                  add r13, rax
   621                                 
   622                                 
   623 00000398 4889D8                  mov rax, rbx
   624 0000039B 48C7C200000000          mov rdx, 0
   625 000003A2 49F7F4                  div r12
   626 000003A5 4889C3                  mov rbx, rax
   627 000003A8 EB0F                    jmp primeIfDone
   628                                 
   629                                 notDivisible:
   630                                 
   631 000003AA 49FFC4                  inc r12
   632 000003AD 4C89E7                  mov rdi, r12
   633 000003B0 E831FFFFFF              call isPrime
   634 000003B5 4883F801                cmp rax, TRUE
   635 000003B9 75ED                    jne notDivisible
   636                                 
   637                                 primeIfDone:
   638 000003BB EBB5                    jmp primeFactorsLoop
   639                                 
   640                                 primeFactorsDone:
   641 000003BD 4C89E8                  mov rax, r13
   642                                 
   643 000003C0 415D                    pop r13
   644 000003C2 415C                    pop r12
   645 000003C4 5B                      pop rbx
   646 000003C5 C3                      ret
   647                                 
=======
   595                                 
   596                                 [global findSumPrimeFactors]
   597                                 findSumPrimeFactors:
   598 0000035F 53                      push rbx
   599 00000360 4154                    push r12
   600 00000362 4155                    push r13
   601                                 
   602 00000364 4889FB                  mov rbx, rdi
   603 00000367 49C7C402000000          mov r12, 2
   604 0000036E 49C7C500000000          mov r13, 0
   605                                 
   606                                 
   607                                 primeFactorsLoop:
   608 00000375 4883FB01                cmp rbx, 1
   609 00000379 7E41                    jle primeFactorsDone
   610                                 
   611                                 
   612 0000037B 4889D8                  mov rax, rbx
   613 0000037E 48C7C200000000          mov rdx, 0
   614 00000385 49F7F4                  div r12
   615 00000388 4883FA00                cmp rdx, 0
   616 0000038C 751B                    jne notDivisible
   617                                 
   618                                 primeDigitsLoop:
   619 0000038E 4C89E7                  mov rdi, r12
   620 00000391 E897FFFFFF              call findSumOfDigits
   621 00000396 4901C5                  add r13, rax
   622                                 
   623                                 
   624 00000399 4889D8                  mov rax, rbx
   625 0000039C 48C7C200000000          mov rdx, 0
   626 000003A3 49F7F4                  div r12
   627 000003A6 4889C3                  mov rbx, rax
   628 000003A9 EB0F                    jmp primeIfDone
   629                                 
   630                                 notDivisible:
   631                                 
   632 000003AB 49FFC4                  inc r12
   633 000003AE 4C89E7                  mov rdi, r12
   634 000003B1 E831FFFFFF              call isPrime
   635 000003B6 4883F801                cmp rax, TRUE
   636 000003BA 75ED                    jne notDivisible
   637                                 
   638                                 primeIfDone:
   639 000003BC EBB5                    jmp primeFactorsLoop
   640                                 
   641                                 primeFactorsDone:
   642 000003BE 4C89E8                  mov rax, r13
   643                                 
   644 000003C1 415D                    pop r13
   645 000003C3 415C                    pop r12
   646 000003C5 5B                      pop rbx
   647 000003C6 C3                      ret
>>>>>>> development
   648                                 
   649                                 
   650                                 
   651                                 
   652                                 
   653                                 
<<<<<<< HEAD
   654                                 [global spinLock1]
   655                                 spinLock:
   656 000003C6 48C7C001000000          mov rax, 1
   657                                 
   658 000003CD F048870425[00000000]     lock xchg rax, qword [myLock]
   659                                 
   660                                 
   661                                 
   662                                 
   663 000003D6 4885C0                  test rax, rax
   664                                 
=======
   654                                 
   655                                 [global spinLock1]
   656                                 spinLock:
   657 000003C7 48C7C001000000          mov rax, 1
   658                                 
   659 000003CE F048870425[00000000]     lock xchg rax, qword [myLock]
   660                                 
   661                                 
   662                                 
   663                                 
   664 000003D7 4885C0                  test rax, rax
>>>>>>> development
   665                                 
   666                                 
   667                                 
   668                                 
<<<<<<< HEAD
   669 000003D9 75E9                    jnz spinLock
   670                                 
   671                                 
   672 000003DB C3                      ret
   673                                 
=======
   669                                 
   670 000003DA 75E9                    jnz spinLock
   671                                 
   672                                 
   673 000003DC C3                      ret
>>>>>>> development
   674                                 
   675                                 
   676                                 
   677                                 
<<<<<<< HEAD
   678                                 [global spinUnlock]
   679                                 spinUnlock:
   680 000003DC 48C7C000000000          mov rax, 0
   681                                 
   682 000003E3 48870425[00000000]      xchg rax, qword [myLock]
   683                                 
   684 000003EB C3                      ret
   685                                 
=======
   678                                 
   679                                 [global spinUnlock]
   680                                 spinUnlock:
   681 000003DD 48C7C000000000          mov rax, 0
   682                                 
   683 000003E4 48870425[00000000]      xchg rax, qword [myLock]
   684                                 
   685 000003EC C3                      ret
>>>>>>> development
   686                                 
   687                                 
   688                                 
   689                                 
   690                                 
   691                                 
   692                                 
   693                                 
   694                                 
   695                                 
   696                                 
   697                                 
<<<<<<< HEAD
   698                                 [global printString]
   699                                 printString:
   700                                 
   701                                 
   702                                 
   703                                 
   704 000003EC 48C7C200000000          mov rdx, 0
   705                                 strCountLoop:
   706 000003F3 803C1700                cmp byte [rdi+rdx], NULL
   707 000003F7 7403                    je strCountLoopDone
   708 000003F9 48FFC2                  inc rdx
   709 000003FC EBF3                    jmp strCountLoop
   710                                 strCountLoopDone:
   711 000003FE 4883FA00                cmp rdx, 0
   712 00000402 7411                    je printStringDone
   713                                 
   714                                 
   715                                 
   716                                 
   717 00000404 48C7C001000000          mov rax, SYS_write
   718 0000040B 4889FE                  mov rsi, rdi
   719 0000040E 48C7C701000000          mov rdi, STDOUT
   720                                 
   721 00000415 0F05                    syscall
   722                                 
   723                                 
   724                                 
   725                                 
   726                                 printStringDone:
   727 00000417 C3                      ret
   728                                 
   729                                 
   730                                 
=======
   698                                 
   699                                 [global printString]
   700                                 printString:
   701                                 
   702                                 
   703                                 
   704                                 
   705 000003ED 48C7C200000000          mov rdx, 0
   706                                 strCountLoop:
   707 000003F4 803C1700                cmp byte [rdi+rdx], NULL
   708 000003F8 7403                    je strCountLoopDone
   709 000003FA 48FFC2                  inc rdx
   710 000003FD EBF3                    jmp strCountLoop
   711                                 strCountLoopDone:
   712 000003FF 4883FA00                cmp rdx, 0
   713 00000403 7411                    je printStringDone
   714                                 
   715                                 
   716                                 
   717                                 
   718 00000405 48C7C001000000          mov rax, SYS_write
   719 0000040C 4889FE                  mov rsi, rdi
   720 0000040F 48C7C701000000          mov rdi, STDOUT
   721                                 
   722 00000416 0F05                    syscall
   723                                 
   724                                 
   725                                 
   726                                 
   727                                 printStringDone:
   728 00000418 C3                      ret
   729                                 
   730                                 
   731                                 
>>>>>>> development
