     1                                 %line 1+1 a12procs.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 
    10                                 
    11                                 
    12                                 
    13                                 
    14                                 
    15                                 
    16                                 [section .data]
    17                                 
    18                                 
    19                                 
    20                                 
    21                                 LF equ 10
    22                                 NULL equ 0
    23                                 ESC equ 27
    24                                 
    25                                 TRUE equ 1
    26                                 FALSE equ 0
    27                                 
    28                                 SUCCESS equ 0
    29                                 NOSUCCESS equ 1
    30                                 
    31                                 STDIN equ 0
    32                                 STDOUT equ 1
    33                                 STDERR equ 2
    34                                 
    35                                 SYS_read equ 0
    36                                 SYS_write equ 1
    37                                 SYS_open equ 2
    38                                 SYS_close equ 3
    39                                 SYS_fork equ 57
    40                                 SYS_exit equ 60
    41                                 SYS_creat equ 85
    42                                 SYS_time equ 201
    43                                 
    44                                 
    45                                 
    46                                 
    47 00000000 0100000000000000       currentIndex dq 1
    48 00000008 0000000000000000       myLock dq 0
    49                                 
    50                                 
    51                                 
    52                                 
    53 00000010 202E2E2E5468726561-    msgThread1 db " ...Thread starting...", LF, NULL
    54 00000010 64207374617274696E-
    55 00000010 672E2E2E0A00       
    56                                 
    57                                 
    58                                 
    59                                 
    60                                 THREAD_MIN equ 1
    61                                 THREAD_MAX equ 8
    62                                 LIMIT_MIN equ 10
    63                                 LIMIT_MAX equ 4000000000
    64                                 
    65 00000028 55736167653A202E2F-    errUsage db "Usage: ./smithNums -t <senaryNumber> ",
    66 00000028 736D6974684E756D73-
    67 00000028 202D74203C73656E61-
    68 00000028 72794E756D6265723E-
    69 00000028 20                 
    70 0000004D 2D6C203C73656E6172-     db "-l <senaryNumber>", LF, NULL
    71 0000004D 794E756D6265723E0A-
    72 0000004D 00                 
    73 00000060 4572726F722C20696E-    errOptions db "Error, invalid command line options."
    74 00000060 76616C696420636F6D-
    75 00000060 6D616E64206C696E65-
    76 00000060 206F7074696F6E732E 
    77 00000084 0A00                    db LF, NULL
    78 00000086 4572726F722C20696E-    errLSpec db "Error, invalid limit specifier."
    79 00000086 76616C6964206C696D-
    80 00000086 697420737065636966-
    81 00000086 6965722E           
    82 000000A5 0A00                    db LF, NULL
    83 000000A7 4572726F722C20696E-    errLValue db "Error, invalid limit value."
    84 000000A7 76616C6964206C696D-
    85 000000A7 69742076616C75652E 
    86 000000C2 0A00                    db LF, NULL
    87 000000C4 4572726F722C206C69-    errLRange db "Error, limit out of range."
    88 000000C4 6D6974206F7574206F-
    89 000000C4 662072616E67652E   
    90 000000DE 0A00                    db LF, NULL
    91 000000E0 4572726F722C20696E-    errTSpec db "Error, invalid thread count specifier."
    92 000000E0 76616C696420746872-
    93 000000E0 65616420636F756E74-
    94 000000E0 207370656369666965-
    95 000000E0 722E               
    96 00000106 0A00                    db LF, NULL
    97 00000108 4572726F722C20696E-    errTValue db "Error, invalid thread count value."
    98 00000108 76616C696420746872-
    99 00000108 65616420636F756E74-
   100 00000108 2076616C75652E     
   101 0000012A 0A00                    db LF, NULL
   102 0000012C 4572726F722C207468-    errTRange db "Error, thread count out of range."
   103 0000012C 7265616420636F756E-
   104 0000012C 74206F7574206F6620-
   105 0000012C 72616E67652E       
   106 0000014D 0A00                    db LF, NULL
   107                                 
   108                                 
   109                                 
   110                                 
   111 0000014F 0600000000000000       qSix dq 6
   112 00000157 0A00000000000000       qTen dq 10
   113 0000015F 0000000000000000       tmpNum dq 0
   114                                 
   115                                 
   116                                 
   117                                 
   118                                 [section .text]
   119                                 
   120                                 
   121                                 
   122                                 
   123                                 
   124                                 
   125                                 
   126                                 
   127                                 
   128                                 
   129                                 
   130                                 
   131                                 
   132                                 
   133                                 
   134                                 
   135                                 
   136                                 
   137                                 
   138                                 
   139                                 
   140                                 
   141                                 
   142                                 
   143                                 
   144                                 
   145                                 
   146                                 
   147                                 
   148                                 
   149                                 [global getArgs]
   150                                 getArgs:
   151                                 
   152 00000000 53                     push rbx
   153 00000001 4154                   push r12
   154 00000003 4155                   push r13
   155 00000005 4156                   push r14
   156 00000007 4157                   push r15
   157                                 
   158 00000009 4883FF01               cmp rdi, 1
   159 0000000D 0F84F7000000           je usageErr
   160                                 
   161 00000013 4883FF05               cmp rdi, 5
   162 00000017 0F82D5000000           jb clERR
   163                                 
   164 0000001D 49C7C401000000         mov r12, 1
   165 00000024 49C7C500000000         mov r13, 0
   166 0000002B 4E8B3CE6               mov r15, qword [rsi + r12 * 8]
   167 0000002F 438A042F               mov al, byte [r15 + r13]
   168 00000033 3C2D                   cmp al, "-"
   169 00000035 0F854D010000           jne threadSpecErr
   170 0000003B 49FFC5                 inc r13
   171 0000003E 438A042F               mov al, byte [r15 + r13]
   172 00000042 3C74                   cmp al, "t"
   173 00000044 0F853E010000           jne threadSpecErr
   174 0000004A 49FFC5                 inc r13
   175 0000004D 438A042F               mov al, byte [r15 + r13]
   176 00000051 3C00                   cmp al, NULL
   177 00000053 0F852F010000           jne threadSpecErr
   178                                 
   179 00000059 49FFC4                 inc r12
   180 0000005C 57                     push rdi
   181 0000005D 56                     push rsi
   182 0000005E 4A8B3CE6               mov rdi, qword [rsi + r12 * 8]
   183 00000062 4889D6                 mov rsi, rdx
   184 00000065 E83E010000             call aSenary2int
   185 0000006A 5E                     pop rsi
   186 0000006B 5F                     pop rdi
   187                                 
   188 0000006C 4883F800               cmp rax, FALSE
   189 00000070 0F84FD000000           je threadValueErr
   190 00000076 8B02                   mov eax, dword [rdx]
   191 00000078 83F801                 cmp eax, THREAD_MIN
   192 0000007B 0F829E000000           jb threadRangeErr
   193 00000081 83F808                 cmp eax, THREAD_MAX
   194 00000084 0F8795000000           ja threadRangeErr
   195                                 
   196 0000008A 49C7C500000000         mov r13, 0
   197 00000091 49FFC4                 inc r12
   198 00000094 4E8B3CE6               mov r15, qword [rsi + r12 * 8]
   199 00000098 438A042F               mov al, byte [r15 + r13]
   200 0000009C 3C2D                   cmp al, "-"
   201 0000009E 0F85BA000000           jne limitSpecErr
   202 000000A4 49FFC5                 inc r13
   203 000000A7 438A042F               mov al, byte [r15 + r13]
   204 000000AB 3C6C                   cmp al, "l"
   205 000000AD 0F85AB000000           jne limitSpecErr
   206 000000B3 49FFC5                 inc r13
   207 000000B6 438A042F               mov al, byte [r15 + r13]
   208 000000BA 3C00                   cmp al, NULL
   209 000000BC 0F859C000000           jne limitSpecErr
   210                                 
   211 000000C2 49FFC4                 inc r12
   212 000000C5 57                     push rdi
   213 000000C6 56                     push rsi
   214 000000C7 4A8B3CE6               mov rdi, qword [rsi + r12 * 8]
   215 000000CB 4889CE                 mov rsi, rcx
   216 000000CE E8D5000000             call aSenary2int
   217 000000D3 5E                     pop rsi
   218 000000D4 5F                     pop rdi
   219 000000D5 4883F800               cmp rax, FALSE
   220 000000D9 7472                   je limitValueErr
   221                                 
   222 000000DB 488B01                 mov rax, qword [rcx]
   223 000000DE 4883F80A               cmp rax, LIMIT_MIN
   224 000000E2 7254                   jb limitRangeErr
   225                                 
   226 000000E4 483D00286BEE           cmp rax, LIMIT_MAX
   227 000000EA 774C                   ja limitRangeErr
   228                                 
   229 000000EC 48C7C001000000         mov rax, TRUE
   230 000000F3 E9A6000000             jmp done
   231                                 
   232                                 clERR:
   233 000000F8 48C7C7[00000000]       mov rdi, errOptions
   234 000000FF E8C4020000             call printString
   235 00000104 48C7C000000000         mov rax, FALSE
   236 0000010B E98E000000             jmp done
   237                                 
   238                                 usageErr:
   239 00000110 48C7C7[00000000]       mov rdi, errUsage
   240 00000117 E8AC020000             call printString
   241 0000011C 48C7C000000000         mov rax, FALSE
   242 00000123 EB7C                   jmp done
   243                                 
   244                                 threadRangeErr:
   245 00000125 48C7C7[00000000]       mov rdi, errTRange
   246 0000012C E897020000             call printString
   247 00000131 48C7C000000000         mov rax, FALSE
   248 00000138 EB67                   jmp done
   249                                 
   250                                 limitRangeErr:
   251 0000013A 48C7C7[00000000]       mov rdi, errLRange
   252 00000141 E882020000             call printString
   253 00000146 48C7C000000000         mov rax, FALSE
   254 0000014D EB52                   jmp done
   255                                 
   256                                 limitValueErr:
   257 0000014F 48C7C7[00000000]       mov rdi, errLValue
   258 00000156 E86D020000             call printString
   259 0000015B 48C7C000000000         mov rax, FALSE
   260 00000162 EB3D                   jmp done
   261                                 
   262                                 limitSpecErr:
   263 00000164 48C7C7[00000000]       mov rdi, errLSpec
   264 0000016B E858020000             call printString
   265 00000170 48C7C000000000         mov rax, FALSE
   266 00000177 EB28                   jmp done
   267                                 
   268                                 threadValueErr:
   269 00000179 48C7C7[00000000]       mov rdi, errTValue
   270 00000180 E843020000             call printString
   271 00000185 48C7C000000000         mov rax, FALSE
   272 0000018C EB13                   jmp done
   273                                 
   274                                 threadSpecErr:
   275 0000018E 48C7C7[00000000]       mov rdi, errTSpec
   276 00000195 E82E020000             call printString
   277 0000019A 48C7C000000000         mov rax, FALSE
   278 000001A1 EBFE                   jmp done
   279                                 
   280                                 done:
   281 000001A3 415F                   pop r15
   282 000001A5 415E                   pop r14
   283 000001A7 415D                   pop r13
   284 000001A9 415C                   pop r12
   285 000001AB 5B                     pop rbx
   286                                 
   287 000001AC C3                     ret
   288                                 
   289                                 
   290                                 
   291                                 
   292                                 
   293                                 
   294                                 
   295                                 
   296                                 
   297                                 
   298                                 
   299                                 [global aSenary2int]
   300                                 aSenary2int:
   301                                 
   302 000001AD 53                     push rbx
   303 000001AE 4153                   push r11
   304 000001B0 4154                   push r12
   305 000001B2 4155                   push r13
   306 000001B4 4156                   push r14
   307                                 
   308 000001B6 49C7C300000000         mov r11, 0
   309                                 countPos:
   310 000001BD 428A041F               mov al, byte [rdi + r11]
   311 000001C1 49FFC3                 inc r11
   312 000001C4 3C00                   cmp al, NULL
   313 000001C6 75F3                   jne countPos
   314 000001C8 49FFCB                 dec r11
   315                                 
   316 000001CB 49C7C400000000         mov r12, 0
   317 000001D2 4D89DD                 mov r13, r11
   318 000001D5 49FFCD                 dec r13
   319 000001D8 48C7C306000000         mov rbx, 6
   320 000001DF 49C7C600000000         mov r14, 0
   321                                 
   322                                 toDigit:
   323 000001E6 4A0FB60427             movzx rax, byte [rdi + r12]
   324                                 
   325 000001EB 3C30                   cmp al, "0"
   326 000001ED 7252                   jb valueErr
   327                                 
   328 000001EF 3C39                   cmp al, "9"
   329 000001F1 774E                   ja valueErr
   330                                 
   331 000001F3 2C30                   sub al, 48
   332                                 
   333 000001F5 4983FD00               cmp r13, 0
   334 000001F9 7500                   jne exp
   335 000001FB EB09                   jmp continue
   336                                 
   337                                 exp:
   338 000001FD F7E3                   mul ebx
   339 000001FF 49FFCD                 dec r13
   340 00000202 4983FD00               cmp r13, 0
   341 00000206 75F3                   jne exp
   342                                 
   343                                 continue:
   344 00000208 4901C6                 add r14, rax
   345                                 
   346 0000020B 49FFC4                 inc r12
   347 0000020E 49FFCB                 dec r11
   348 00000211 4D89DD                 mov r13, r11
   349 00000214 49FFCD                 dec r13
   350 00000217 4983FB00               cmp r11, 0
   351 0000021B 75C7                   jne toDigit
   352                                 
   353 0000021D 4983FE00               cmp r14, 0
   354 00000221 761E                   jbe valueErr
   355                                 
   356 00000223 4983FE0A               cmp r14, 10
   357 00000227 7200                   jb returnDword
   358 00000229 EB0A                   jmp returnQword
   359                                 
   360                                 returnDword:
   361 0000022B 448936                 mov dword [rsi], r14d
   362 0000022E 48C7C001000000         mov rax, TRUE
   363 00000235 EB13                   jmp done2
   364                                 
   365                                 returnQword:
   366 00000237 4C8936                 mov qword [rsi], r14
   367 0000023A 48C7C001000000         mov rax, TRUE
   368 00000241 EB07                   jmp done2
   369                                 
   370                                 valueErr:
   371 00000243 48C7C000000000         mov rax, FALSE
   372 0000024A EBFE                   jmp done2
   373                                 
   374                                 done2:
   375 0000024C 415E                   pop r14
   376 0000024E 415D                   pop r13
   377 00000250 415C                   pop r12
   378 00000252 415B                   pop r11
   379 00000254 5B                     pop rbx
   380                                 
   381 00000255 C3                     ret
   382                                 
   383                                 
   384                                 
   385                                 
   386                                 
   387                                 
   388                                 
   389                                 
   390                                 
   391                                 
   392                                 
   393                                 
   394                                 
   395                                 
   396                                 
   397                                 [common userLimit 1:8]
   398                                 [common smithNumberCount 1:8]
   399                                 
   400                                 [global findSmithNumberCount]
   401                                 findSmithNumberCount:
   402                                 
   403                                 
   404                                 
   405                                 
   406                                 
   407                                 
   408                                 
   409                                 
   410                                 
   411 00000256 53                     push rbx
   412 00000257 4154                   push r12
   413 00000259 4155                   push r13
   414                                 
   415 0000025B 4C8B2C25[00000000]     mov r13, qword [userLimit]
   416                                 
   417 00000263 48C7C7[00000000]       mov rdi, msgThread1
   418 0000026A E859010000             call printString
   419                                 
   420                                 SNLOOP:
   421 0000026F E82E010000             call spinLock
   422 00000274 488B1C25[00000000]     mov rbx, qword [currentIndex]
   423 0000027C 48FF0425[00000000]     inc qword [currentIndex]
   424 00000284 E82F010000             call spinUnlock
   425                                 
   426 00000289 4C392C25[00000000]     cmp qword [currentIndex], r13
   427 00000291 7600                   jbe SNLOOPBODY
   428 00000293 EB2F                   jmp SNLOOPEND
   429                                 
   430                                 SNLOOPBODY:
   431 00000295 4889DF                 mov rdi, rbx
   432 00000298 E82A000000             call isPrime
   433 0000029D 4883F801               cmp rax, TRUE
   434 000002A1 741F                   je notSN
   435                                 
   436 000002A3 4889DF                 mov rdi, rbx
   437 000002A6 E88F000000             call findSumPrimeFactors
   438 000002AB 4989C4                 mov r12, rax
   439                                 
   440 000002AE 4889DF                 mov rdi, rbx
   441 000002B1 E857000000             call findSumOfDigits
   442 000002B6 4C39E0                 cmp rax, r12
   443 000002B9 7507                   jne notSN
   444                                 
   445 000002BB F048FF0425[00000000]     lock inc qword [smithNumberCount]
   446                                 
   447                                 notSN:
   448 000002C4 EBA7                   jmp SNLOOP
   449                                 
   450                                 SNLOOPEND:
   451 000002C6 415D                   pop r13
   452 000002C8 415C                   pop r12
   453 000002CA 5B                     pop rbx
   454                                 
   455 000002CB C3                     ret
   456                                 
   457                                 
   458                                 
   459                                 
   460                                 
   461                                 
   462                                 
   463                                 
   464                                 
   465                                 
   466                                 
   467                                 
   468                                 
   469                                 
   470                                 
   471                                 
   472                                 
   473                                 
   474                                 
   475                                 
   476                                 [global isPrime]
   477                                 isPrime:
   478                                 
   479 000002CC 53                     push rbx
   480 000002CD 4154                   push r12
   481 000002CF 4155                   push r13
   482                                 
   483 000002D1 4883FF01               cmp rdi, 1
   484 000002D5 762C                   jbe returnFalse
   485                                 
   486                                 
   487 000002D7 49C7C402000000         mov r12, 2
   488 000002DE 4989FD                 mov r13, rdi
   489 000002E1 49D1ED                 shr r13, 1
   490                                 
   491                                 isPrimeLoop:
   492 000002E4 4D39EC                 cmp r12, r13
   493 000002E7 7711                   ja returnTrue
   494 000002E9 4889F8                 mov rax, rdi
   495 000002EC 4899                   cqo
   496 000002EE 41F7F4                 div r12d
   497 000002F1 49FFC4                 inc r12
   498 000002F4 4883FA00               cmp rdx, 0
   499 000002F8 7409                   je returnFalse
   500 000002FA EBE6                   jmp isPrimeLoop
   501                                 
   502                                 returnTrue:
   503 000002FC 48C7C001000000         mov rax, TRUE
   504 00000303 EB05                   jmp isPrimeComplete
   505                                 
   506                                 returnFalse:
   507 00000305 48C7C000000000         mov rax, FALSE
   508                                 
   509                                 isPrimeComplete:
   510 0000030C 415D                   pop r13
   511 0000030E 415C                   pop r12
   512 00000310 5B                     pop rbx
   513                                 
   514 00000311 C3                     ret
   515                                 
   516                                 
   517                                 
   518                                 
   519                                 
   520                                 
   521                                 
   522                                 
   523                                 
   524                                 
   525                                 
   526                                 
   527                                 
   528                                 
   529                                 
   530                                 
   531                                 
   532                                 
   533                                 [global findSumOfDigits]
   534                                 findSumOfDigits:
   535                                 
   536 00000312 53                     push rbx
   537 00000313 4154                   push r12
   538                                 
   539 00000315 49C7C400000000         mov r12, 0
   540                                 
   541                                 sumWhileLoop:
   542 0000031C 4883FF00               cmp rdi, 0
   543 00000320 7700                   ja calculateSum
   544 00000322 EB12                   jmp sumCalculated
   545                                 calculateSum:
   546 00000324 4889F8                 mov rax, rdi
   547 00000327 4899                   cqo
   548 00000329 F73425[00000000]       div dword [qTen]
   549 00000330 4901D4                 add r12, rdx
   550 00000333 4889C7                 mov rdi, rax
   551 00000336 EBE2                   jmp sumWhileLoop
   552                                 sumCalculated:
   553 00000338 4C89E0                 mov rax, r12
   554                                 
   555 0000033B 415C                   pop r12
   556 0000033D 5B                     pop rbx
   557                                 
   558 0000033E C3                     ret
   559                                 
   560                                 
   561                                 
   562                                 
   563                                 
   564                                 
   565                                 
   566                                 
   567                                 
   568                                 
   569                                 
   570                                 
   571                                 
   572                                 
   573                                 
   574                                 
   575                                 
   576                                 
   577                                 
   578                                 
   579                                 
   580                                 
   581                                 
   582                                 
   583                                 
   584                                 [global findSumPrimeFactors]
   585                                 findSumPrimeFactors:
   586 0000033F 53                      push rbx
   587 00000340 4154                    push r12
   588 00000342 4155                    push r13
   589                                 
   590 00000344 4889FB                  mov rbx, rdi
   591 00000347 49C7C402000000          mov r12, 2
   592 0000034E 49C7C500000000          mov r13, 0
   593                                 
   594                                 
   595                                 primeFactorsLoop:
   596 00000355 4883FB01                cmp rbx, 1
   597 00000359 7E41                    jle primeFactorsDone
   598                                 
   599                                 
   600 0000035B 4889D8                  mov rax, rbx
   601 0000035E 48C7C200000000          mov rdx, 0
   602 00000365 49F7F4                  div r12
   603 00000368 4883FA00                cmp rdx, 0
   604 0000036C 751B                    jne notDivisible
   605                                 
   606                                 primeDigitsLoop:
   607 0000036E 4C89E7                  mov rdi, r12
   608 00000371 E897FFFFFF              call findSumOfDigits
   609 00000376 4901C5                  add r13, rax
   610                                 
   611                                 
   612 00000379 4889D8                  mov rax, rbx
   613 0000037C 48C7C200000000          mov rdx, 0
   614 00000383 49F7F4                  div r12
   615 00000386 4889C3                  mov rbx, rax
   616 00000389 EB0F                    jmp primeIfDone
   617                                 
   618                                 notDivisible:
   619                                 
   620 0000038B 49FFC4                  inc r12
   621 0000038E 4C89E7                  mov rdi, r12
   622 00000391 E831FFFFFF              call isPrime
   623 00000396 4883F801                cmp rax, TRUE
   624 0000039A 75ED                    jne notDivisible
   625                                 
   626                                 primeIfDone:
   627 0000039C EBB5                    jmp primeFactorsLoop
   628                                 
   629                                 primeFactorsDone:
   630 0000039E 4C89E8                  mov rax, r13
   631                                 
   632 000003A1 415D                    pop r13
   633 000003A3 415C                    pop r12
   634 000003A5 5B                      pop rbx
   635 000003A6 C3                      ret
   636                                 
   637                                 
   638                                 
   639                                 
   640                                 
   641                                 
   642                                 
   643                                 [global spinLock1]
   644                                 spinLock:
   645 000003A7 48C7C001000000          mov rax, 1
   646                                 
   647 000003AE F048870425[00000000]     lock xchg rax, qword [myLock]
   648                                 
   649                                 
   650                                 
   651                                 
   652 000003B7 4885C0                  test rax, rax
   653                                 
   654                                 
   655                                 
   656                                 
   657                                 
   658 000003BA 75E9                    jnz spinLock
   659                                 
   660                                 
   661 000003BC C3                      ret
   662                                 
   663                                 
   664                                 
   665                                 
   666                                 
   667                                 [global spinUnlock]
   668                                 spinUnlock:
   669 000003BD 48C7C000000000          mov rax, 0
   670                                 
   671 000003C4 48870425[00000000]      xchg rax, qword [myLock]
   672                                 
   673 000003CC C3                      ret
   674                                 
   675                                 
   676                                 
   677                                 
   678                                 
   679                                 
   680                                 
   681                                 
   682                                 
   683                                 
   684                                 
   685                                 
   686                                 
   687                                 [global printString]
   688                                 printString:
   689                                 
   690                                 
   691                                 
   692                                 
   693 000003CD 48C7C200000000          mov rdx, 0
   694                                 strCountLoop:
   695 000003D4 803C1700                cmp byte [rdi+rdx], NULL
   696 000003D8 7403                    je strCountLoopDone
   697 000003DA 48FFC2                  inc rdx
   698 000003DD EBF3                    jmp strCountLoop
   699                                 strCountLoopDone:
   700 000003DF 4883FA00                cmp rdx, 0
   701 000003E3 7411                    je printStringDone
   702                                 
   703                                 
   704                                 
   705                                 
   706 000003E5 48C7C001000000          mov rax, SYS_write
   707 000003EC 4889FE                  mov rsi, rdi
   708 000003EF 48C7C701000000          mov rdi, STDOUT
   709                                 
   710 000003F6 0F05                    syscall
   711                                 
   712                                 
   713                                 
   714                                 
   715                                 printStringDone:
   716 000003F8 C3                      ret
   717                                 
   718                                 
   719                                 
