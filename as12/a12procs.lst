     1                                 %line 1+1 a12procs.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 
    10                                 
    11                                 
    12                                 
    13                                 
    14                                 
    15                                 
    16                                 [section .data]
    17                                 
    18                                 
    19                                 
    20                                 
    21                                 LF equ 10
    22                                 NULL equ 0
    23                                 ESC equ 27
    24                                 
    25                                 TRUE equ 1
    26                                 FALSE equ 0
    27                                 
    28                                 SUCCESS equ 0
    29                                 NOSUCCESS equ 1
    30                                 
    31                                 STDIN equ 0
    32                                 STDOUT equ 1
    33                                 STDERR equ 2
    34                                 
    35                                 SYS_read equ 0
    36                                 SYS_write equ 1
    37                                 SYS_open equ 2
    38                                 SYS_close equ 3
    39                                 SYS_fork equ 57
    40                                 SYS_exit equ 60
    41                                 SYS_creat equ 85
    42                                 SYS_time equ 201
    43                                 
    44                                 
    45                                 
    46                                 
    47 00000000 0100000000000000       currentIndex dq 1
    48 00000008 0000000000000000       myLock dq 0
    49                                 
    50                                 
    51                                 
    52                                 
    53 00000010 202E2E2E5468726561-    msgThread1 db " ...Thread starting...", LF, NULL
    54 00000010 64207374617274696E-
    55 00000010 672E2E2E0A00       
    56                                 
    57                                 
    58                                 
    59                                 
    60                                 THREAD_MIN equ 1
    61                                 THREAD_MAX equ 8
    62                                 LIMIT_MIN equ 10
    63                                 LIMIT_MAX equ 4000000000
    64                                 
    65 00000028 55736167653A202E2F-    errUsage db "Usage: ./smithNums -t <senaryNumber> ",
    66 00000028 736D6974684E756D73-
    67 00000028 202D74203C73656E61-
    68 00000028 72794E756D6265723E-
    69 00000028 20                 
    70 0000004D 2D6C203C73656E6172-     db "-l <senaryNumber>", LF, NULL
    71 0000004D 794E756D6265723E0A-
    72 0000004D 00                 
    73 00000060 4572726F722C20696E-    errOptions db "Error, invalid command line options."
    74 00000060 76616C696420636F6D-
    75 00000060 6D616E64206C696E65-
    76 00000060 206F7074696F6E732E 
    77 00000084 0A00                    db LF, NULL
    78 00000086 4572726F722C20696E-    errLSpec db "Error, invalid limit specifier."
    79 00000086 76616C6964206C696D-
    80 00000086 697420737065636966-
    81 00000086 6965722E           
    82 000000A5 0A00                    db LF, NULL
    83 000000A7 4572726F722C20696E-    errLValue db "Error, invalid limit value."
    84 000000A7 76616C6964206C696D-
    85 000000A7 69742076616C75652E 
    86 000000C2 0A00                    db LF, NULL
    87 000000C4 4572726F722C206C69-    errLRange db "Error, limit out of range."
    88 000000C4 6D6974206F7574206F-
    89 000000C4 662072616E67652E   
    90 000000DE 0A00                    db LF, NULL
    91 000000E0 4572726F722C20696E-    errTSpec db "Error, invalid thread count specifier."
    92 000000E0 76616C696420746872-
    93 000000E0 65616420636F756E74-
    94 000000E0 207370656369666965-
    95 000000E0 722E               
    96 00000106 0A00                    db LF, NULL
    97 00000108 4572726F722C20696E-    errTValue db "Error, invalid thread count value."
    98 00000108 76616C696420746872-
    99 00000108 65616420636F756E74-
   100 00000108 2076616C75652E     
   101 0000012A 0A00                    db LF, NULL
   102 0000012C 4572726F722C207468-    errTRange db "Error, thread count out of range."
   103 0000012C 7265616420636F756E-
   104 0000012C 74206F7574206F6620-
   105 0000012C 72616E67652E       
   106 0000014D 0A00                    db LF, NULL
   107                                 
   108                                 
   109                                 
   110                                 
   111 0000014F 0600000000000000       qSix dq 6
   112 00000157 0A00000000000000       qTen dq 10
   113 0000015F 0000000000000000       tmpNum dq 0
   114                                 
   115                                 
   116                                 
   117                                 
   118                                 [section .text]
   119                                 
   120                                 
   121                                 
   122                                 
   123                                 
   124                                 
   125                                 
   126                                 
   127                                 
   128                                 
   129                                 
   130                                 
   131                                 
   132                                 
   133                                 
   134                                 
   135                                 
   136                                 
   137                                 
   138                                 
   139                                 
   140                                 
   141                                 
   142                                 
   143                                 
   144                                 
   145                                 
   146                                 
   147                                 
   148                                 
   149                                 [global getArgs]
   150                                 getArgs:
   151                                 
   152 00000000 53                     push rbx
   153 00000001 4154                   push r12
   154 00000003 4155                   push r13
   155 00000005 4156                   push r14
   156 00000007 4157                   push r15
   157                                 
   158 00000009 4883FF01               cmp rdi, 1
   159 0000000D 0F8401010000           je usageErr
   160                                 
   161 00000013 4883FF01               cmp rdi, 1
   162 00000017 0F82DF000000           jb clERR
   163                                 
   164 0000001D 4883FF05               cmp rdi, 5
   165 00000021 0F87D5000000           ja clERR
   166                                 
   167 00000027 49C7C401000000         mov r12, 1
   168 0000002E 49C7C500000000         mov r13, 0
   169 00000035 4E8B3CE6               mov r15, qword [rsi + r12 * 8]
   170 00000039 438A042F               mov al, byte [r15 + r13]
   171 0000003D 3C2D                   cmp al, "-"
   172 0000003F 0F854D010000           jne threadSpecErr
   173 00000045 49FFC5                 inc r13
   174 00000048 438A042F               mov al, byte [r15 + r13]
   175 0000004C 3C74                   cmp al, "t"
   176 0000004E 0F853E010000           jne threadSpecErr
   177 00000054 49FFC5                 inc r13
   178 00000057 438A042F               mov al, byte [r15 + r13]
   179 0000005B 3C00                   cmp al, NULL
   180 0000005D 0F852F010000           jne threadSpecErr
   181                                 
   182 00000063 49FFC4                 inc r12
   183 00000066 57                     push rdi
   184 00000067 56                     push rsi
   185 00000068 4A8B3CE6               mov rdi, qword [rsi + r12 * 8]
   186 0000006C 4889D6                 mov rsi, rdx
   187 0000006F E83E010000             call aSenary2int
   188 00000074 5E                     pop rsi
   189 00000075 5F                     pop rdi
   190                                 
   191 00000076 4883F800               cmp rax, FALSE
   192 0000007A 0F84FD000000           je threadValueErr
   193 00000080 8B02                   mov eax, dword [rdx]
   194 00000082 83F801                 cmp eax, THREAD_MIN
   195 00000085 0F829E000000           jb threadRangeErr
   196 0000008B 83F808                 cmp eax, THREAD_MAX
   197 0000008E 0F8795000000           ja threadRangeErr
   198                                 
   199 00000094 49C7C500000000         mov r13, 0
   200 0000009B 49FFC4                 inc r12
   201 0000009E 4E8B3CE6               mov r15, qword [rsi + r12 * 8]
   202 000000A2 438A042F               mov al, byte [r15 + r13]
   203 000000A6 3C2D                   cmp al, "-"
   204 000000A8 0F85BA000000           jne limitSpecErr
   205 000000AE 49FFC5                 inc r13
   206 000000B1 438A042F               mov al, byte [r15 + r13]
   207 000000B5 3C6C                   cmp al, "l"
   208 000000B7 0F85AB000000           jne limitSpecErr
   209 000000BD 49FFC5                 inc r13
   210 000000C0 438A042F               mov al, byte [r15 + r13]
   211 000000C4 3C00                   cmp al, NULL
   212 000000C6 0F859C000000           jne limitSpecErr
   213                                 
   214 000000CC 49FFC4                 inc r12
   215 000000CF 57                     push rdi
   216 000000D0 56                     push rsi
   217 000000D1 4A8B3CE6               mov rdi, qword [rsi + r12 * 8]
   218 000000D5 4889CE                 mov rsi, rcx
   219 000000D8 E8D5000000             call aSenary2int
   220 000000DD 5E                     pop rsi
   221 000000DE 5F                     pop rdi
   222 000000DF 4883F800               cmp rax, FALSE
   223 000000E3 7472                   je limitValueErr
   224                                 
   225 000000E5 488B01                 mov rax, qword [rcx]
   226 000000E8 4883F80A               cmp rax, LIMIT_MIN
   227 000000EC 7254                   jb limitRangeErr
   228                                 
   229 000000EE 483D00286BEE           cmp rax, LIMIT_MAX
   230 000000F4 774C                   ja limitRangeErr
   231                                 
   232 000000F6 48C7C001000000         mov rax, TRUE
   233 000000FD E9A6000000             jmp done
   234                                 
   235                                 clERR:
   236 00000102 48C7C7[00000000]       mov rdi, errOptions
   237 00000109 E8C2020000             call printString
   238 0000010E 48C7C000000000         mov rax, FALSE
   239 00000115 E98E000000             jmp done
   240                                 
   241                                 usageErr:
   242 0000011A 48C7C7[00000000]       mov rdi, errUsage
   243 00000121 E8AA020000             call printString
   244 00000126 48C7C000000000         mov rax, FALSE
   245 0000012D EB7C                   jmp done
   246                                 
   247                                 threadRangeErr:
   248 0000012F 48C7C7[00000000]       mov rdi, errTRange
   249 00000136 E895020000             call printString
   250 0000013B 48C7C000000000         mov rax, FALSE
   251 00000142 EB67                   jmp done
   252                                 
   253                                 limitRangeErr:
   254 00000144 48C7C7[00000000]       mov rdi, errLRange
   255 0000014B E880020000             call printString
   256 00000150 48C7C000000000         mov rax, FALSE
   257 00000157 EB52                   jmp done
   258                                 
   259                                 limitValueErr:
   260 00000159 48C7C7[00000000]       mov rdi, errLValue
   261 00000160 E86B020000             call printString
   262 00000165 48C7C000000000         mov rax, FALSE
   263 0000016C EB3D                   jmp done
   264                                 
   265                                 limitSpecErr:
   266 0000016E 48C7C7[00000000]       mov rdi, errLSpec
   267 00000175 E856020000             call printString
   268 0000017A 48C7C000000000         mov rax, FALSE
   269 00000181 EB28                   jmp done
   270                                 
   271                                 threadValueErr:
   272 00000183 48C7C7[00000000]       mov rdi, errTValue
   273 0000018A E841020000             call printString
   274 0000018F 48C7C000000000         mov rax, FALSE
   275 00000196 EB13                   jmp done
   276                                 
   277                                 threadSpecErr:
   278 00000198 48C7C7[00000000]       mov rdi, errTSpec
   279 0000019F E82C020000             call printString
   280 000001A4 48C7C000000000         mov rax, FALSE
   281 000001AB EBFE                   jmp done
   282                                 
   283                                 done:
   284 000001AD 415F                   pop r15
   285 000001AF 415E                   pop r14
   286 000001B1 415D                   pop r13
   287 000001B3 415C                   pop r12
   288 000001B5 5B                     pop rbx
   289                                 
   290 000001B6 C3                     ret
   291                                 
   292                                 
   293                                 
   294                                 
   295                                 
   296                                 
   297                                 
   298                                 
   299                                 
   300                                 
   301                                 
   302                                 [global aSenary2int]
   303                                 aSenary2int:
   304                                 
   305 000001B7 53                     push rbx
   306 000001B8 4153                   push r11
   307 000001BA 4154                   push r12
   308 000001BC 4155                   push r13
   309 000001BE 4156                   push r14
   310                                 
   311 000001C0 49C7C300000000         mov r11, 0
   312                                 countPos:
   313 000001C7 428A041F               mov al, byte [rdi + r11]
   314 000001CB 49FFC3                 inc r11
   315 000001CE 3C00                   cmp al, NULL
   316 000001D0 75F3                   jne countPos
   317 000001D2 49FFCB                 dec r11
   318                                 
   319 000001D5 49C7C400000000         mov r12, 0
   320 000001DC 4D89DD                 mov r13, r11
   321 000001DF 49FFCD                 dec r13
   322 000001E2 48C7C306000000         mov rbx, 6
   323 000001E9 49C7C600000000         mov r14, 0
   324                                 
   325                                 toDigit:
   326 000001F0 4A0FB60427             movzx rax, byte [rdi + r12]
   327                                 
   328 000001F5 3C30                   cmp al, "0"
   329 000001F7 7252                   jb valueErr
   330                                 
   331 000001F9 3C39                   cmp al, "9"
   332 000001FB 774E                   ja valueErr
   333                                 
   334 000001FD 2C30                   sub al, 48
   335                                 
   336 000001FF 4983FD00               cmp r13, 0
   337 00000203 7500                   jne exp
   338 00000205 EB09                   jmp continue
   339                                 
   340                                 exp:
   341 00000207 F7E3                   mul ebx
   342 00000209 49FFCD                 dec r13
   343 0000020C 4983FD00               cmp r13, 0
   344 00000210 75F3                   jne exp
   345                                 
   346                                 continue:
   347 00000212 4901C6                 add r14, rax
   348                                 
   349 00000215 49FFC4                 inc r12
   350 00000218 49FFCB                 dec r11
   351 0000021B 4D89DD                 mov r13, r11
   352 0000021E 49FFCD                 dec r13
   353 00000221 4983FB00               cmp r11, 0
   354 00000225 75C7                   jne toDigit
   355                                 
   356 00000227 4983FE00               cmp r14, 0
   357 0000022B 761E                   jbe valueErr
   358                                 
   359 0000022D 4983FE0A               cmp r14, 10
   360 00000231 7200                   jb returnDword
   361 00000233 EB0A                   jmp returnQword
   362                                 
   363                                 returnDword:
   364 00000235 448936                 mov dword [rsi], r14d
   365 00000238 48C7C001000000         mov rax, TRUE
   366 0000023F EB13                   jmp done2
   367                                 
   368                                 returnQword:
   369 00000241 4C8936                 mov qword [rsi], r14
   370 00000244 48C7C001000000         mov rax, TRUE
   371 0000024B EB07                   jmp done2
   372                                 
   373                                 valueErr:
   374 0000024D 48C7C000000000         mov rax, FALSE
   375 00000254 EBFE                   jmp done2
   376                                 
   377                                 done2:
   378 00000256 415E                   pop r14
   379 00000258 415D                   pop r13
   380 0000025A 415C                   pop r12
   381 0000025C 415B                   pop r11
   382 0000025E 5B                     pop rbx
   383                                 
   384 0000025F C3                     ret
   385                                 
   386                                 
   387                                 
   388                                 
   389                                 
   390                                 
   391                                 
   392                                 
   393                                 
   394                                 
   395                                 
   396                                 
   397                                 
   398                                 
   399                                 
   400                                 [common userLimit 1:8]
   401                                 [common smithNumberCount 1:8]
   402                                 
   403                                 [global findSmithNumberCount]
   404                                 findSmithNumberCount:
   405                                 
   406                                 
   407                                 
   408                                 
   409                                 
   410                                 
   411                                 
   412                                 
   413                                 
   414 00000260 53                     push rbx
   415 00000261 4154                   push r12
   416                                 
   417 00000263 48C7C7[00000000]       mov rdi, msgThread1
   418 0000026A E861010000             call printString
   419                                 
   420 0000026F E836010000             call spinLock
   421 00000274 488B1C25[00000000]     mov rbx, qword [currentIndex]
   422 0000027C 48FF0425[00000000]     inc qword [currentIndex]
   423 00000284 E837010000             call spinUnlock
   424                                 
   425                                 SNLOOP:
   426 00000289 483B1C25[00000000]     cmp rbx, qword [userLimit]
   427 00000291 7724                   ja SNLOOPEND
   428                                 
   429 00000293 4889DF                 mov rdi, rbx
   430 00000296 E8A7000000             call findSumPrimeFactors
   431 0000029B 4989C4                 mov r12, rax
   432                                 
   433 0000029E 4889DF                 mov rdi, rbx
   434 000002A1 E863000000             call findSumOfDigits
   435 000002A6 4C39E0                 cmp rax, r12
   436 000002A9 7507                   jne notSN
   437 000002AB F048FF0425[00000000]     lock inc qword [smithNumberCount]
   438                                 notSN:
   439 000002B4 48FFC3                 inc rbx
   440 000002B7 EBCE                   jmp SNLOOP
   441                                 
   442                                 SNLOOPEND:
   443 000002B9 415C                   pop r12
   444 000002BB 5B                     pop rbx
   445                                 
   446 000002BC C3                     ret
   447                                 
   448                                 
   449                                 
   450                                 
   451                                 
   452                                 
   453                                 
   454                                 
   455                                 
   456                                 
   457                                 
   458                                 
   459                                 
   460                                 
   461                                 
   462                                 
   463                                 
   464                                 
   465                                 
   466                                 
   467                                 [global isPrime]
   468                                 isPrime:
   469                                 
   470 000002BD 53                     push rbx
   471 000002BE 4154                   push r12
   472                                 
   473 000002C0 4883FF01               cmp rdi, 1
   474 000002C4 7600                   jbe returnFalse
   475 000002C6 EB07                   jmp checkForLoop
   476                                 returnFalse:
   477 000002C8 48C7C000000000         mov rax, FALSE
   478 000002CF EB37                   jmp done3
   479                                 
   480                                 checkForLoop:
   481 000002D1 49C7C402000000         mov r12, 2
   482 000002D8 4889F8                 mov rax, rdi
   483 000002DB 4899                   cqo
   484 000002DD 41F7F4                 div r12d
   485 000002E0 48890425[00000000]     mov qword [tmpNum], rax
   486                                 
   487                                 forLoop:
   488 000002E8 4889F8                 mov rax, rdi
   489 000002EB 4899                   cqo
   490 000002ED 41F7F4                 div r12d
   491 000002F0 49FFC4                 inc r12
   492 000002F3 4883FA00               cmp rdx, 0
   493 000002F7 74CD                   je returnFalse
   494 000002F9 4C3B2425[00000000]     cmp r12, qword [tmpNum]
   495 00000301 76E3                   jbe forLoop
   496                                 
   497 00000303 48C7C001000000         mov rax, TRUE
   498                                 
   499                                 done3:
   500                                 
   501 0000030A 415C                   pop r12
   502 0000030C 5B                     pop rbx
   503                                 
   504 0000030D C3                     ret
   505                                 
   506                                 
   507                                 
   508                                 
   509                                 
   510                                 
   511                                 
   512                                 
   513                                 
   514                                 
   515                                 
   516                                 
   517                                 
   518                                 
   519                                 
   520                                 
   521                                 
   522                                 
   523                                 [global findSumOfDigits]
   524                                 findSumOfDigits:
   525                                 
   526 0000030E 53                     push rbx
   527 0000030F 4154                   push r12
   528                                 
   529 00000311 49C7C400000000         mov r12, 0
   530 00000318 4889F8                 mov rax, rdi
   531                                 
   532                                 whileCondition:
   533 0000031B 4883FF00               cmp rdi, 0
   534 0000031F 7700                   ja whileBody
   535 00000321 EB1B                   jmp sumFound
   536                                 whileBody:
   537 00000323 4899                   cqo
   538 00000325 F73425[00000000]       div dword [qTen]
   539 0000032C 4901D4                 add r12, rdx
   540 0000032F 4889F8                 mov rax, rdi
   541 00000332 4899                   cqo
   542 00000334 F73425[00000000]       div dword [qTen]
   543 0000033B 4889C7                 mov rdi, rax
   544 0000033E EBD9                   jmp whileCondition
   545                                 sumFound:
   546 00000340 4C89E0                 mov rax, r12
   547                                 
   548 00000343 415C                   pop r12
   549 00000345 5B                     pop rbx
   550                                 
   551 00000346 C3                     ret
   552                                 
   553                                 
   554                                 
   555                                 
   556                                 
   557                                 
   558                                 
   559                                 
   560                                 
   561                                 
   562                                 
   563                                 
   564                                 
   565                                 
   566                                 
   567                                 
   568                                 
   569                                 
   570                                 
   571                                 
   572                                 
   573                                 
   574                                 
   575                                 
   576                                 
   577                                 [global findSumPrimeFactors]
   578                                 findSumPrimeFactors:
   579 00000347 53                      push rbx
   580 00000348 4154                    push r12
   581 0000034A 4155                    push r13
   582                                 
   583 0000034C 4889FB                  mov rbx, rdi
   584 0000034F 49C7C402000000          mov r12, 2
   585 00000356 49C7C500000000          mov r13, 0
   586                                 
   587                                 
   588                                 primeFactorsLoop:
   589 0000035D 4883FB01                cmp rbx, 1
   590 00000361 7E41                    jle primeFactorsDone
   591                                 
   592                                 
   593 00000363 4889D8                  mov rax, rbx
   594 00000366 48C7C200000000          mov rdx, 0
   595 0000036D 49F7F4                  div r12
   596 00000370 4883FA00                cmp rdx, 0
   597 00000374 751B                    jne notDivisible
   598                                 
   599                                 primeDigitsLoop:
   600 00000376 4C89E7                  mov rdi, r12
   601 00000379 E88BFFFFFF              call findSumOfDigits
   602 0000037E 4901C5                  add r13, rax
   603                                 
   604                                 
   605 00000381 4889D8                  mov rax, rbx
   606 00000384 48C7C200000000          mov rdx, 0
   607 0000038B 49F7F4                  div r12
   608 0000038E 4889C3                  mov rbx, rax
   609 00000391 EB0F                    jmp primeIfDone
   610                                 
   611                                 notDivisible:
   612                                 
   613 00000393 49FFC4                  inc r12
   614 00000396 4C89E7                  mov rdi, r12
   615 00000399 E81AFFFFFF              call isPrime
   616 0000039E 4883F801                cmp rax, TRUE
   617 000003A2 75ED                    jne notDivisible
   618                                 
   619                                 primeIfDone:
   620 000003A4 EBB5                    jmp primeFactorsLoop
   621                                 
   622                                 primeFactorsDone:
   623 000003A6 4C89E8                  mov rax, r13
   624                                 
   625 000003A9 415D                    pop r13
   626 000003AB 415C                    pop r12
   627 000003AD 5B                      pop rbx
   628 000003AE C3                      ret
   629                                 
   630                                 
   631                                 
   632                                 
   633                                 
   634                                 
   635                                 
   636                                 [global spinLock1]
   637                                 spinLock:
   638 000003AF 48C7C001000000          mov rax, 1
   639                                 
   640 000003B6 F048870425[00000000]     lock xchg rax, qword [myLock]
   641                                 
   642                                 
   643                                 
   644                                 
   645 000003BF 4885C0                  test rax, rax
   646                                 
   647                                 
   648                                 
   649                                 
   650                                 
   651 000003C2 75E9                    jnz spinLock
   652                                 
   653                                 
   654 000003C4 C3                      ret
   655                                 
   656                                 
   657                                 
   658                                 
   659                                 
   660                                 [global spinUnlock]
   661                                 spinUnlock:
   662 000003C5 48C7C000000000          mov rax, 0
   663                                 
   664 000003CC 48870425[00000000]      xchg rax, qword [myLock]
   665                                 
   666 000003D4 C3                      ret
   667                                 
   668                                 
   669                                 
   670                                 
   671                                 
   672                                 
   673                                 
   674                                 
   675                                 
   676                                 
   677                                 
   678                                 
   679                                 
   680                                 [global printString]
   681                                 printString:
   682                                 
   683                                 
   684                                 
   685                                 
   686 000003D5 48C7C200000000          mov rdx, 0
   687                                 strCountLoop:
   688 000003DC 803C1700                cmp byte [rdi+rdx], NULL
   689 000003E0 7403                    je strCountLoopDone
   690 000003E2 48FFC2                  inc rdx
   691 000003E5 EBF3                    jmp strCountLoop
   692                                 strCountLoopDone:
   693 000003E7 4883FA00                cmp rdx, 0
   694 000003EB 7411                    je printStringDone
   695                                 
   696                                 
   697                                 
   698                                 
   699 000003ED 48C7C001000000          mov rax, SYS_write
   700 000003F4 4889FE                  mov rsi, rdi
   701 000003F7 48C7C701000000          mov rdi, STDOUT
   702                                 
   703 000003FE 0F05                    syscall
   704                                 
   705                                 
   706                                 
   707                                 
   708                                 printStringDone:
   709 00000400 C3                      ret
   710                                 
   711                                 
   712                                 
